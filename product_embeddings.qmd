---
title: "Untitled"
format: html
editor: visual
---

## Notes

-   Data sources:

    -   https://archive.ics.uci.edu/dataset/352/online+retail

    -   https://archive.ics.uci.edu/dataset/502/online+retail+ii

-   Other literature:

    -   https://anhornsby.github.io/embeddings-retail/#/

    -   https://www.dunnhumby.com/resources/blog/science-data/en/how-to-solve-the-problem-of-product-similarity-with-data-science/

    -   https://www.youtube.com/watch?v=0uWCGn-1KRE

```{r message=FALSE}
library(tidyverse)
library(magrittr)
library(ggplot2)
library(tictoc)
library(word2vec)

source("./product_embeddings_fn.r")

options(dplyr.summarise.inform = FALSE)

```

## Load and prepare data

...

```{r}
transactions_df <- readr::read_csv("../dunnhumby_complete/dunnhumby_The-Complete-Journey CSV/transaction_data.csv")
transactions_df %<>% mutate(list_price = (SALES_VALUE-RETAIL_DISC-COUPON_DISC)/QUANTITY ) 
transactions_df %<>% mutate( month = floor(((DAY-1) %% 365 ) / 31) )
transactions_df %<>% mutate( wday = ((DAY-1) %% 7) )
transactions_df
```

```{r}

# make sure that there is only one row per transaction id/product id combination
transactions_summary_df <- transactions_df %>%
      group_by(month, wday, BASKET_ID, PRODUCT_ID) %>% 
      summarize(quantity = sum(QUANTITY))

```

```{r}
product_df <- readr::read_csv("../dunnhumby_complete/dunnhumby_The-Complete-Journey CSV/product.csv")
product_df
```

## Filter data and roll up to basekets

```{r}

# plot histogram of product frequencies
product_freq <- transactions_summary_df %>% 
      group_by(PRODUCT_ID) %>% 
      summarize(total_quantity = sum(quantity)) %>% 
      arrange(desc(total_quantity))

```

```{r}
# identify all product ids which have been bought fewer than five times
unpopular_products <- product_freq %>% filter(total_quantity <= 5) %>% select(PRODUCT_ID)

# drop all of those rarely purchased products
transactions_summary_df %<>% anti_join( unpopular_products, by = "PRODUCT_ID" )
```

```{r}

# roll up transactions to strings
transaction_baskets_df <- 
      transactions_summary_df %>% 
      group_by(BASKET_ID) %>% 
      summarize( basket = list(c(PRODUCT_ID, paste0("M",month[1]), paste0("WD",wday[1]))) )

transaction_baskets_df$basket %<>% sapply( function(x) paste(sample(x), collapse = " "))

```

## Calibration Products Statistics 

```{r}

# determine and mark the top 500 products as calibration targets for hyper-parameter tuning
n_test_products <- 200
calibration_products_df <- sample_n(product_freq[1:1500,], n_test_products)
calibration_products <- calibration_products_df$PRODUCT_ID %>% as.character()

```

```{r}

list_prices_df <- transactions_df %>%
                semi_join( calibration_products_df, by = "PRODUCT_ID" ) %>%
                group_by(PRODUCT_ID) %>% 
                filter( QUANTITY > 0, list_price > 0 ) %>%
                summarize(list_price_avg = mean(list_price, na.rm=T), 
                          list_price_sd = sd(list_price, na.rm=T) )

log_list_prices <- list_prices_df$list_price_avg %T>% 
                {names(.) <- list_prices_df$PRODUCT_ID} %>% 
                log()

```

```{r}

seasonality_weekly_mat <-
    transactions_df %>% 
    semi_join(calibration_products_df, by = "PRODUCT_ID") %>% 
    group_by(PRODUCT_ID, wday) %>%
    summarize(quantity = sum(QUANTITY)) %>%
    #group_by(PRODUCT_ID) %>%
    #mutate(quantity = quantity/sum(quantity)) %>%
    pivot_wider(names_from = "wday", values_from = "quantity", values_fill = 0) %>% 
    select(PRODUCT_ID, `0`, `1`, `2`, `3`, `4`, `5`, `6`) %>% 
    as.data.frame()

rownames(seasonality_weekly_mat) <- seasonality_weekly_mat$PRODUCT_ID
seasonality_weekly_mat %<>% .[,-1] %>% as.matrix()
seasonality_weekly_corr_upper <- corr_posterior_mat(seasonality_weekly_mat)
seasonality_weekly_corr_upper %<>% .[calibration_products, calibration_products]
```

```{r}
seasonality_monthly_mat <-
    transactions_df %>% 
    semi_join(calibration_products_df, by = "PRODUCT_ID") %>% 
    group_by(PRODUCT_ID, month) %>%
    summarize(quantity = sum(QUANTITY)) %>%
    group_by(PRODUCT_ID) %>%
    mutate(quantity = quantity/sum(quantity)) %>%
    pivot_wider(names_from = "month", values_from = "quantity", values_fill = 0)

seasonality_monthly_mat %<>%
    select(PRODUCT_ID, `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`) %>% 
    as.data.frame()

rownames(seasonality_monthly_mat) <- seasonality_monthly_mat$PRODUCT_ID
seasonality_monthly_mat %<>% .[,-1] %>% as.matrix()
seasonality_monthly_corr_upper <- corr_posterior_mat(seasonality_monthly_mat)
seasonality_monthly_corr_upper %<>% .[calibration_products, calibration_products]
```

```{r}

log_similarity_price_relative <- function(log_price_1, log_prices_2) {
  -1 * abs(log_prices_2 - log_price_1)
} 
log_similarity_price_absolute <- function(price_1, prices_2) {
  -1 * abs(prices_2 - price_1)
}
log_similarity_price <- function(price_1, prices_2, log_price_1, log_prices_2) {
  log_similarity_price_absolute(price_1, prices_2) +
  log_similarity_price_relative(log_price_1, log_prices_2)
}
```

```{r}

log_similarity_price_mat <-
sapply(calibration_products, \(product_1) {
    price_1 <- exp(log_list_prices[as.character(product_1)])
    log_price_1 <- log_list_prices[as.character(product_1)]

    prices_2 <- exp(log_list_prices[as.character(calibration_products)])
    log_prices_2 <- log_list_prices[as.character(calibration_products)]
    log_similarity_price(price_1, prices_2, log_price_1, log_prices_2)
})
log_similarity_price_mat %<>% .[calibration_products, calibration_products]
```

```{r}
log_prior_similarity_mat <-
      log( (seasonality_weekly_corr_upper/2 + .5) ) + 
      log( (seasonality_monthly_corr_upper/2 + .5) ) +
      log_similarity_price_mat
```

```{r}
validation_products <- product_freq$PRODUCT_ID[1:1500] 
validation_products_info_df <- product_df %>% filter(PRODUCT_ID %in% validation_products)
validation_products_dept <- validation_products_info_df %>% {names(.$DEPARTMENT) <- .$PRODUCT_ID; .$DEPARTMENT }
validation_products_dept_match_mat <- 
    sapply(validation_products_dept, \(dept_1) { 
      sapply(validation_products_dept, \(dept_2) { dept_1 == dept_2 })
    })

```

## Hyper-parameter Tuning for Word2Vec

```{r}

params <- crossing(dim = c(2, 10, 20, 50, 100, 150), window = c(10, 15))
fit <- params %>% group_by(dim, window) %>% 
        summarize( fit = evaluate_model_by_similarity_proximity(calibration_products, dim, window) )

params2 <- crossing(dim = c(200, 250, 300, 400, 500, 600), window = c(15, 20))
fit2 <- params2 %>% group_by(dim, window) %>% 
        summarize( fit = evaluate_model_by_similarity_proximity(calibration_products, dim, window) )

params3 <- crossing(dim = c(800, 1000, 1200, 1500), window = c(15, 20, 30))
fit3 <- params3 %>% group_by(dim, window) %>% 
        summarize( fit = evaluate_model_by_similarity_proximity(calibration_products, dim, window) )

params4 <- crossing(dim = c(1750, 2000, 2500, 3000), window = c(30, 40))
fit4 <- params4 %>% group_by(dim, window) %>% 
        summarize( fit = evaluate_model_by_similarity_proximity(calibration_products, dim, window) )

params5 <- crossing(dim = c(3500, 4000), window = c(30, 40, 50))
fit5 <- params5 %>% group_by(dim, window) %>% 
        summarize( fit = evaluate_model_by_similarity_proximity(calibration_products, dim, window) )

#params5 <- crossing(dim = c(5000, 7500, 10000), window = c(40, 50))
#fit5 <- params5 %>% group_by(dim, window) %>% summarize( fit = evaluate_model(dim, window) )

fit %>% bind_rows(fit2) %>% bind_rows(fit3) %>% bind_rows(fit4) %>% bind_rows(fit5) %>% 
  filter(dim >= 200) %>%
  ggplot(aes(dim, fit, color = as.factor(window) )) + geom_point() + geom_line() + theme_bw()
```

## Validate Tuned Hyper-Parameters

```{r}


params <- crossing(dim = c(2, 10, 20, 50, 100, 150), window = c(10, 15))
val_fit <- params %>% group_by(dim, window) %>% 
          summarize( fit = evaluate_model_by_dept_match(calibration_products, 
                                                        validation_products_dept_match_mat, 
                                                        dim, window) )

params2 <- crossing(dim = c(200, 250, 300, 400, 500, 600), window = c(15, 20))
val_fit2 <- params2 %>% group_by(dim, window) %>% 
            summarize( fit = evaluate_model_by_dept_match(calibration_products, 
                                                          validation_products_dept_match_mat, 
                                                          dim, window) )

params3 <- crossing(dim = c(800, 1000, 1200, 1500), window = c(15, 20, 30))
val_fit3 <- params3 %>% group_by(dim, window) %>% 
            summarize( fit = evaluate_model_by_dept_match(calibration_products, 
                                                          validation_products_dept_match_mat, 
                                                          dim, window) )

params4 <- crossing(dim = c(1750, 2000, 2500, 3000), window = c(30, 40))
val_fit4 <- params4 %>% group_by(dim, window) %>% 
            summarize( fit = evaluate_model_by_dept_match(calibration_products, 
                                                          validation_products_dept_match_mat, 
                                                          dim, window) )

params5 <- crossing(dim = c(3500, 4000), window = c(30, 40, 50))
val_fit5 <- params5 %>% group_by(dim, window) %>% 
            summarize( fit = evaluate_model_by_dept_match(calibration_products, 
                                                          validation_products_dept_match_mat, 
                                                          dim, window) )


val_fit %>% bind_rows(val_fit2) %>% bind_rows(val_fit3) %>% 
  bind_rows(val_fit4) %>% bind_rows(val_fit5) %>% 
  filter(dim >= 200) %>%
  ggplot(aes(dim, fit, color = as.factor(window) )) + geom_point() + geom_line() + theme_bw()

```

## Inspect Examples

```{r}
#model <- get_word2vec(x = transaction_baskets_df$basket, dim = 3000, window = 40, iter = 10)
model <- get_word2vec(x = transaction_baskets_df$basket, dim = 150, window = 40, iter = 10)
embeddings <- as.matrix(model)
vocabulary <- rownames(embeddings)

```

```{r}

cur_product <- "10121610" #"8119231" # "8020001", 

for(cur_product in calibration_products[11:20])
{
    print(cur_product)
  
    word2vec_similarities <- word2vec::word2vec_similarity( embeddings[cur_product,], 
                                                            embeddings, 
                                                            type = "cosine")/2 + 0.5

    word2vec_similarities_df <- data.frame(product_id = colnames(word2vec_similarities),
                                           similarity = word2vec_similarities[1,] ) %>%
                                arrange(desc(similarity))

    similar_products_df <- word2vec_similarities_df %>% filter(similarity > .7)
    if (nrow(similar_products_df) > 1) {
        similar_products_df$product_id %<>% as.integer() 
        similar_products_df %<>% left_join(product_df, by = c("product_id"="PRODUCT_ID"))
        print(similar_products_df)
        #break
    }
}

#word2vec_similarities_df
```
